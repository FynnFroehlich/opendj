{
  "swagger" : "2.0",
  "info" : {
    "description" : "OpenDJ Playlist Service incl. Voting",
    "version" : "1.0.0",
    "title" : "Playlist Service",
    "license" : {
      "name" : "GPLv3",
      "url" : "https://www.gnu.org/licenses/gpl-3.0.de.html"
    }
  },
  "basePath" : "/api/v1",
  "tags" : [ {
    "name" : "Playlist",
    "description" : "API for playlists in the system"
  } ],
  "schemes" : [ "http" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/playlists" : {
      "get" : {
        "tags" : [ "Playlists" ],
        "summary" : "Get all playlists in system",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Playlists"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Playlists" ],
        "description" : "Create new playlist in system",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "playlist",
          "description" : "Playlist that we want to create",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Playlist"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "New playlist is created",
            "schema" : {
              "$ref" : "#/definitions/Playlist"
            }
          }
        }
      }
    },
    "/playlists/{playlistId}/firstTrack" : {
      "get" : {
        "tags" : [ "Playlists" ],
        "summary" : "Get firstTrack with given playlist ID",
        "parameters" : [ {
          "name" : "playlistId",
          "in" : "path",
          "description" : "ID of playlist that we want to use to get its first track",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Track is found",
            "schema" : {
              "$ref" : "#/definitions/Track"
            }
          },
          "404" : {
            "description" : "Playlist empty"
          }
        }
      }
    },
    "/playlists/{playlistId}" : {
      "get" : {
        "tags" : [ "Playlists" ],
        "summary" : "Get playlist with given ID",
        "parameters" : [ {
          "name" : "playlistId",
          "in" : "path",
          "description" : "ID of playlist that we want to find",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Playlist is found",
            "schema" : {
              "$ref" : "#/definitions/Playlist"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Playlists" ],
        "summary" : "Update Playlist with give ID",
        "parameters" : [ {
          "name" : "playlistId",
          "in" : "path",
          "description" : "ID of playlist that we want to find",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "Playlist",
          "description" : "Playlist with new values of properties",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Playlist"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Playlist is updated",
            "schema" : {
              "$ref" : "#/definitions/Playlist"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Playlists" ],
        "summary" : "Delete Playlist with given ID",
        "parameters" : [ {
          "name" : "playlistId",
          "in" : "path",
          "description" : "ID of playlist that we want to find",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Playlist is deleted"
          }
        }
      }
    },
    "/playlists/{playlistId}/tracks/{resourceURI}" : {
      "delete" : {
        "tags" : [ "Playlists" ],
        "summary" : "Delete Song in playlist ID",
        "parameters" : [ {
          "name" : "playlistId",
          "in" : "path",
          "description" : "ID of playlist that we want to find",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceURI",
          "in" : "path",
          "description" : "ID of a track that we want to find",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Song is deleted"
          }
        }
      }
    },
    "/addtrack" : {
      "post": {
        "tags" : [ "Add track" ],
        "description" : "Add track uri",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "playlist",
          "description" : "submit spotify uri to add track to playlist",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Track"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "New playlist is created",
            "schema" : {
              "$ref" : "#/definitions/Playlist"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "Playlist" : {
      "required" : [ "_id", "name" ],
      "properties" : {
        "_id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "tracks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Track"
          }
        }
      }
    },
    "Playlists" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/Playlist"
      }
    },
    "Track" : {
      "required" : [ "resourceURI" ],
      "properties" : {
        "resourceURI" : {
          "type" : "string"
        },
        "artistName" : {
          "type" : "string"
        },
        "imageObject" : {
          "$ref" : "#/definitions/imageObject"
        }
      }
    },
    "imageObject" : {
      "properties" : {
        "externalURI" : {
          "type" : "string"
        }
      }
    }
  }
}
